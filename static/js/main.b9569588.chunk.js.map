{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","countryData","setCountryData","DateTime","now","c","localTime","setLocalTime","londonTime","setLondonTime","yorkTime","setYorkTime","transferLondon","event","Date","eventTime","toLocaleString","timeZone","split","eventDate","useEffect","interval","setInterval","transferYork","clearInterval","fetchData","a","Axios","get","process","then","response","catch","error","alert","fetchCountry","location","country","className","Card","style","width","Body","Title","ip","isp","region","src","flag","altSpellings","city","Text","MapContainer","center","lat","lng","zoom","scrollWheelZoom","TileLayer","attribution","url","day","month","year","hour","minute","second","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9569588.chunk.js","sourcesContent":["import 'leaflet/dist/leaflet.css';\nimport './App.css';\nimport { useState, useEffect } from 'react'\nimport Axios from 'axios'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { DateTime } from \"luxon\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card } from 'react-bootstrap';\n\n\n\n\nfunction App() {\n  const [data, setData] = useState('')\n  const [countryData, setCountryData] = useState('')\n  const [localTime, setLocalTime] = useState(DateTime.now().c)\n  const [londonTime, setLondonTime] = useState('')\n  const [yorkTime, setYorkTime] = useState('')\n\n\n  const transferLondon = () => {\n    let event = new Date();\n    event = (event.toLocaleString('en-GB', { timeZone: 'Europe/London' }))\n    let eventTime = event.split(' ')[1]\n    let eventDate = event.split(' ')[0]\n    eventTime = eventTime.split(':')\n    eventDate = eventDate.split('/')\n    setLondonTime({ eventDate, eventTime })\n  }\n  const transferYork = () => {\n    let event = new Date();\n    event = (event.toLocaleString('en-GB', { timeZone: 'America/New_York' }))\n    let eventTime = event.split(' ')[1]\n    let eventDate = event.split(' ')[0]\n    eventTime = eventTime.split(':')\n    eventDate = eventDate.split('/')\n    setYorkTime({ eventDate, eventTime })\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLocalTime(DateTime.now().c)\n      transferLondon()\n      transferYork()\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [])\n\n\n  useEffect(() => {\n    transferLondon()\n    fetchData()\n  }, [])\n\n  const APIKEY = process.env.REACT_APP_API_TOKEN\n\n  const fetchData = async () => {\n    await Axios.get(`https://geo.ipify.org/api/v1?apiKey=${APIKEY}`)\n      .then(response => setData(response.data))\n      .catch(error => alert(error))\n  }\n\n  useEffect(() => {\n    if (data) fetchCountry()\n  }, [data])\n\n  const fetchCountry = async () => {\n    await Axios.get(`https://restcountries.eu/rest/v2/alpha/${data.location.country}`)\n      .then(response => setCountryData(response.data))\n      .catch(error => alert(error))\n  }\n\n\n\n  return (\n    <div className='outerDiv'>\n      <p className='loading'>Hello You! :)</p>\n      {countryData ? <>\n        <Card className='cardClass' style={{ width: '80vw' }}>\n\n          <Card.Body>\n            <Card.Title className='title'>Your IP is: {data.ip} ISP: {data.isp}<br />\nYou are located in {countryData.region}, <img src={countryData.flag} /> {countryData.altSpellings[1]}, {data.location.region}, {data.location.city}.</Card.Title>\n            <Card.Text>\n              <MapContainer className='mapContainer' center={[data.location.lat, data.location.lng]} zoom={10} scrollWheelZoom={false}>\n                <TileLayer\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n              </MapContainer>\n            </Card.Text>\n            <div className='title'>\n              Local Time: {localTime.day}.{localTime.month}.{localTime.year}, {''}\n              {localTime.hour < 10 ? `0${localTime.hour}` : localTime.hour}:\n{localTime.minute < 10 ? `0${localTime.minute}` : localTime.minute}:\n{localTime.second < 10 ? `0${localTime.second}` : localTime.second}\n              <br />\nLondon Time: {londonTime.eventDate[0]}.{londonTime.eventDate[1]}.{londonTime.eventDate[2]} {''}\n              {londonTime.eventTime[0]}:\n{londonTime.eventTime[1]}:\n{londonTime.eventTime[2]}\n              <br />\nNew York Time: {yorkTime.eventDate[0]}.{yorkTime.eventDate[1]}.{yorkTime.eventDate[2]} {''}\n              {yorkTime.eventTime[0]}:\n{yorkTime.eventTime[1]}:\n{yorkTime.eventTime[2]}\n            </div>\n          </Card.Body>\n        </Card></> : <div className=\"loading\">Loading...</div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}